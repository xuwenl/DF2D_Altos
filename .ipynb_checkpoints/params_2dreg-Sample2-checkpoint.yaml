---
 ######## Registration paramteres ########
 dir_nikon_data: "/home/xli/dartfish/cartilage_muscle/20250328_Cartilage_UV_ctrlProbe/" 
 
 # where the microscope 3D data is stored
 dir_data_raw: "../analysis/Sample2_0_raw_adapted/"

 # where the maximum projected data is stored
 proj_dir: "../analysis/Sample2_1_Projected/"

 # where the registered data is stored
 reg_dir: "../analysis/Sample2_2_RegisteredMIPfirst/"

 # list of all rounds to be registered
 # reg_rounds: ["4_dc3", "5_dc4", "6_dc5", "7_dc6"]
 # reg_rounds: ["9_draq5", "anchor"]
 # reg_rounds: ["9_draq5", "1_dc0"]
 # reg_rounds: ["2_dc1", "3_dc2"]
 # reg_rounds: ["2_dc1"]
 reg_rounds: ["Sample2"]
 rounds_dir: {"Sample2":'Sample2/'}
 rounds_regex3d: {'Sample2':'.*Point(?P<fov>\d+)_ZStack(?P<z>\d+)_.*Seq(?P<seq>\d+).ome.tiff$'}
 # reg_rounds: ["9_draq5","dc3" ]

 # reference cycle for registration 
 ref_reg_cycle: "Sample2" 

 # where the microscope metadata is. Set to null if metadata is here: dir_data_raw/ref_reg_cycle/MetaData/ref_reg_cycle.xml
 metadata_file: "../analysis/Sample2_0_raw_adapted/metadata.csv"
 pixel_size_um: 0.8584675320309633
 # number of iterations for registration
 reg_maxIter: 500

 # number of resolutions for image pyramid, typically 5
 NumberOfResolutions: 5
 
 # the type of transformation for registration: translation, rigid, affine
 # reg_transform: 'rigid'
 reg_transform: 'rigid'

 # if scale of the transformation parameters are estimated. If false, then params_scales needs to be set
 AutomaticScaleEstimation: false

 # only used if AutomaticScaleEstimation==false. Sets the relative scale of rotation parameters vs translation
 params_scales: ['50000'] #['50000', '50000', '1'] # None

 # pre-mipping smoothing method. Either "gaussian" or "median"
 smooth_method: "median"

 # sigma if smooth_method=="gaussian", window size if smooth_method=="median"
 smooth_degree: 2

 # channel for registration on all cycles except those specified in `cycle_other`
 ref_reg_ch: "ch00" # DAPI channel for reference cycle
 
 # A dictionary. Keys are the names of the cycles that are different from the ref cycle. Values are the channel used for registration
 cycle_other: {} # example: {"9_DRAQ5" : "ch00"}
 
 # number of parallel jobs for registration
 reg_npool: 25

 # number of parallel jobs for maximum intensity projection
 mip_npool: 25

 # Skip maximum intensity projection (for troubleshooting)
 skip_mip: false

 # two channel rounds: list of rounds that only have ch00 and ch01
 twoChannelRounds: []

 # the regex for the file names of the 3d files. The brackets are used to replace with "s" or "FOV" for fov indicators
 filePat3d: "(?P<rndName>\\S+)?_(?P<fov>{}\\d+)_(?P<z>z\\d+)_(?P<ch>ch\\d+)\\S*.tif$" # 0: all, 1: rnd, 2:fov, 3: z, 4: ch


 ######## Background subtraction paramteres ########
 # if there is a background cycle to subtract from all other cycles
 background_subtraction: false

 # background cycles names. Doesn't matter if `background_subtraction` is false. 
 background_cycles: ["8_bg"]

 # where to write background subtraction results. 
 background_subt_dir: "../2_Registered/Background_subtracted/"

 # channels to do background subtraction on
 subtraction_channels: ['ch00', 'ch02', 'ch03']



 ######## Stitching paramteres ########
 # where stitching results are saved 
 stitch_dir: "../analysis/Sample2_2_RegisteredMIPfirst/stitched/"

 # rounds to be stitched. Has to be compatible with `reg_rounds`. If null, `reg_rounds` will be used.
 stch_rounds: null

 # the round to be used as the reference for stitching. if null, uses `ref_reg_cycle`
 stitchRefCycle: null # or "5_dc3"

 # default reference channel for stitching, if null uses ref_reg_ch
 stitchChRef: null # or "ch01"

 # Image-j path
 ij_path: "/home/xli/bin/Fiji.app/ImageJ-linux64"

 # the regex pattern with the file names
 stchFilePattern: "(?P<rndName>\\S+)?_(?P<fov>FOV\\d+)_(?P<ch>ch\\d+)\\S*.tif$" # 0: all, 1: MIP_rnd#, 2:dc/DRAQ, 3: FOV, 4: ch
 #  stchFilePattern: "(?P<rndName>\\d+\\S+)?_(?P<fov>FOV\\d+)_(?P<ch>ch\\d+)\\S*.tif$" # 0: all, 1: MIP_rnd#, 2:dc/DRAQ, 3: FOV, 4: ch
 
 # the regex pattern for fov names
 fov_pat: "FOV(\\d+)" # pattern to extract the fov# 

 # the background image for the fov map: [round, channel]
 fovMap_bg : ["Sample2", "ch00"]




 ######## Decoding paramteres ########
 # where decoding results will be stored + prefix
 dc_out: "../3_Decoded/"

 # If true the deconvoltion will be done in 3d. Current implementation projects the deconved weights and does 2d segmentation
 deconv3d: false

 # path to codebook
 codebook_path: "_codebook/2308_MKopt_codebook_3col.txt"

 # rounds for decoding. The order has to match the codebook
 dc_rounds: ["6_dc0", "7_dc1", "8_dc2", "9_dc3", "10_dc4", "11_dc5", "12_dc6"]

 # the suffix to be appended to the end of all output files
 dc_suff: ""
 
 # the mapping between codes, i.e. [1, 2, 3] to channels
 channel_order: ['ch01', 'ch02', 'ch03']

 # intensities are scaled such that values higher than this are set to 255. "max" scales the maximum to be 255.
 max_intensity: "max" # 255

 # intensities below this value are set to 0
 min_intensity: 1

 # number of pools for decoding
 dc_npool: 8

 # minimum (l2) norm for pixel intensities to be decoded
 min_dc_norm: 0.3 

 # regularization parameter for elastic net (sklearn.linear_model.ElasticNet). if int, this value will be used for all pixels.
 # If a range (e.g. [0.01, 0.1]), a value from this range that varies based on pixel norms
 elasticnet_alpha: [0.01, 0.1] # 0.05 

 # l1 ratio in elastic net regularization. Set to 1 for lasso which is faster but may not handle non-unique combinations well
 elasticnet_l1ratio: 0.99

 # coefficient selection for optimization. Can be "random" or "cyclic". "cyclic" is slower but it is deterministic
 elasticnet_selection: 'random'

 # thresholds for elbow-point detection, applied to the elasticnet weights. First value corresponds to the highest weight, second value to the 2nd highest weight
 elbow_thresholds: [0.5, 0.30]

 # threshold for the maximum spot weight, above which are kept (input to skimage.feature.peak_local_max)
 min_maxWeight: 0.15 

 # sigma for gaussian smoothing on OLS weight maps (not too critical, large values mask real weights)
 weight_smoothing_sigma: 0.7

 # threshold on the weights after gaussian smoothing. If smoothing is being done, has to be >0.
 min_weight: 0.08

 # number of iterations for channel coefficient estimation. 0 to skip 
 chan_coef_niter: 2

 # Elastic-net regularization parameter, only for estimating channel coefficients
 chan_coef_alpha: 0.02 

 # if list, name of fovs to use for channel coef estimation. If int, number of fovs to sample
 chan_coef_fovs: 25

 # number of pixels to sample from each fov to estimate channel coefficients.
 chan_coef_samples: 3000

 

 ######## Combining FOV's paramteres ########
 # Cutoff on the probability of spots being empty. Spots above this value are filtered out
 emptyProbabilityThr: 1 #"infer" # 0.3

 # radius in pixels for removing rolonies in overlapping boundaries
 overlapRemovalRadius: 6.5
 # fov pixel number
 fov_size: 2048
 # fraction of spots per field of view to be used for training the empty classifier (a random forest)
 distance_nn_frac: 0.05
 
 # n_estimator parameter for the random forest model. See sklearn's documentation for RandomForestClassifier
 randomForest_nEstimators: 250

 # max_depth parameter for the random forest model. See sklearn's documentation for RandomForestClassifier
 randomForest_maxDepth: 9
 

 ######## Segmentation paramteres ########
 # where the segmentation and assignment files are saved
 seg_dir: "../4_CellAssignment_new_combined_nuc_emptyProbabilityThr1_dist6.5_DAPIcellpose/"

 # name of the model to use. String (for built-in models) or full path to the model (e.g., custom model)
 pretrained_model: "/home/xli/workspaces/dartfish/cellpose_custom_models/CP_20250205_140652_DAPI" #"nuclei" # "cyto" # "CP"

 # segmentation type for Cellpose. Options: 
 #  1) "nuc": only nuclei, 2) "cyto": only cytoplasm, 
 #  3) "nuc+cyto": cytoplasm segmentation with aid from nuclear stain
 segmentation_type: "nuc"

 # the round name that contains nuclear stain. Doesn't matter if segmentation_type == 'cyto'
 nuc_rnd : "9_dc3" 

 # channel for nuclear stain in `nuc_rnd`. Doesn't matter if segmentation_type == 'cyto'
 nuc_ch: "ch00"

 # the round name that contains cytoplasmic stain. Doesn't matter if segmentation_type == 'nuc'
 cyto_rnd : "13_WGA_anchor"

 # channel for cyto stain in `cyto_rnd`. Doesn't matter if segmentation_type == 'nuc'
 cyto_ch: "ch01"

 # flow_threshold parameter of cellpose. Increase if many missing cells, decrease if too many spurious cells. Default 0.4
 flow_threshold: 0.6

 # average diameter of cells (for "cyto" and "nuc+cyto") or nuclei (for "nuc") in pixels
 seg_diam: 25

 # suffix for generated files. Could be "".
 seg_suf: "_custom"
 
 # whether to skip the segmentation. For troubleshooting
 skip_seg: false

 # number of cores for finding centroids
 centroid_npool: 10

 # maximum acceptable distance of rolonies to their closest cell in pixels
 max_rol2nuc_dist: 150


 ######## QC paramteres ########
 # where the qc files will be stored
 qc_dir : "../5_Analysis_new_combined_nuc_emptyProbabilityThr1_dist6.5/" 

 # name of anchor round 
 anc_rnd: "13_WGA_anchor"

 # anchor channel, where all rolonies are on
 anc_ch: "ch02"
